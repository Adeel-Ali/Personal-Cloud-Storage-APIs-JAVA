/*
 * PersonalCloudStorageAPIsLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 10/10/2016
 */
package com.verizon.cloudapi.api.models;

import java.util.*;

public class FopsCopyRequestBuilder {
    //the instance to build
    private FopsCopyRequest fopsCopyRequest;

    /**
     * Default constructor to initialize the instance
     */
    public FopsCopyRequestBuilder() {
        fopsCopyRequest = new FopsCopyRequest();
    }

    /**
     * Full path of the file/folder for copy/move/rename operations.
     */
    public FopsCopyRequestBuilder src(String src) {
        fopsCopyRequest.setSrc(src);
        return this;
    }

    /**
     * Full path of the target file/folder for copy/move/rename operations. In case of files the full/changed name should be included in the target.
     */
    public FopsCopyRequestBuilder target(String target) {
        fopsCopyRequest.setTarget(target);
        return this;
    }

    /**
     * If 'true', ensures that name conflicts are resolved according to the value of the 'conflictsolve' parameter. Defaults to 'false', in which case the operation will overwrite an existing file/folder of the same name.
     */
    public FopsCopyRequestBuilder safe(boolean safe) {
        fopsCopyRequest.setSafe(safe);
        return this;
    }

    /**
     * Defines how name conflicts are resolved, if the 'safe' parameter is set to 'true'. If set to 'copy', a new file is written to the destination folder with a non-conflicting name. If not set, the operation is rolled back and operation returns '409 Conflict'.
     */
    public FopsCopyRequestBuilder conflictsolve(String conflictsolve) {
        fopsCopyRequest.setConflictsolve(conflictsolve);
        return this;
    }

    /**
     * Specifies what happens if a file of the same name exists at the target path and the 'safe' parameter is not set. Set to 'overwrite' to treat the copied file as completely new. Set to 'modify' to treat the new file as a modification of the old one. If the 'override' parameter is not set, the following algorithm is used: if the existing file has a 'deleted' attribute set to 'true', the file is overwritten; if the old file's 'deleted' attribute is false or not set, the file is modified.
     */
    public FopsCopyRequestBuilder override(String override) {
        fopsCopyRequest.setOverride(override);
        return this;
    }
    /**
     * Build the instance with the given values
     */
    public FopsCopyRequest build() {
        return fopsCopyRequest;
    }
}