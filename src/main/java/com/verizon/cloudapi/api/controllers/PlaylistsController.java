/*
 * PersonalCloudStorageAPIsLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 10/10/2016
 */
package com.verizon.cloudapi.api.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;

import com.verizon.cloudapi.api.*;
import com.verizon.cloudapi.api.models.*;
import com.verizon.cloudapi.api.exceptions.*;
import com.verizon.cloudapi.api.http.client.HttpClient;
import com.verizon.cloudapi.api.http.client.HttpContext;
import com.verizon.cloudapi.api.http.request.HttpRequest;
import com.verizon.cloudapi.api.http.response.HttpResponse;
import com.verizon.cloudapi.api.http.response.HttpStringResponse;
import com.verizon.cloudapi.api.http.client.APICallBack;
import com.verizon.cloudapi.api.controllers.syncwrapper.APICallBackCatcher;

public class PlaylistsController extends BaseController {    
    //private static variables for the singleton pattern
    private static Object syncObject = new Object();
    private static PlaylistsController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the PlaylistsController class 
     */
    public static PlaylistsController getInstance() {
        synchronized (syncObject) {
            if (null == instance) {
                instance = new PlaylistsController();
            }
        }
        return instance;
    }

    /**
     * Remove an item from a playlist.
     * @param    playlistUid    Required parameter: Unique id related to a specific playlist.
     * @param    itemUid    Required parameter: Unique id related to a specific item in a playlist.
     * @return    Returns the void response from the API call 
     */
    public void deletePlaylistItem(
                final String playlistUid,
                final String itemUid
    ) throws Throwable {
        APICallBackCatcher<Object> callback = new APICallBackCatcher<Object>();
        deletePlaylistItemAsync(playlistUid, itemUid, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        callback.getResult();
    }

    /**
     * Remove an item from a playlist.
     * @param    playlistUid    Required parameter: Unique id related to a specific playlist.
     * @param    itemUid    Required parameter: Unique id related to a specific item in a playlist.
     * @return    Returns the void response from the API call 
     */
    public void deletePlaylistItemAsync(
                final String playlistUid,
                final String itemUid,
                final APICallBack<Object> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/playlists/{playlistUid}/items/{itemUid}");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5635135496249000697L;
            {
                    put( "playlistUid", playlistUid );
                    put( "itemUid", itemUid );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4689786101425149747L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "Authorization", String.format("Bearer %1$s", Configuration.oAuthAccessToken) );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().delete(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 401)
                                throw new APIException("[Unauthorized] Bearer token is missing, expired, or invalid.", _context);

                            else if (_responseCode == 404)
                                throw new ErrorResponseException("[Not Found] Resource not found.", _context);

                            else if (_responseCode == 503)
                                throw new ErrorResponseException("[Service Unavailable] See response body for more detail.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //let the caller know of the success
                            callBack.onSuccess(_context, _context);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Retrieves playlist content.
     * @param    playlistUid    Required parameter: Unique id related to a specific playlist.
     * @param    itemUid    Required parameter: Unique id related to a specific item in a playlist.
     * @return    Returns the DynamicResponse response from the API call 
     */
    public DynamicResponse getPlaylistContent(
                final String playlistUid,
                final String itemUid
    ) throws Throwable {
        APICallBackCatcher<DynamicResponse> callback = new APICallBackCatcher<DynamicResponse>();
        getPlaylistContentAsync(playlistUid, itemUid, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Retrieves playlist content.
     * @param    playlistUid    Required parameter: Unique id related to a specific playlist.
     * @param    itemUid    Required parameter: Unique id related to a specific item in a playlist.
     * @return    Returns the void response from the API call 
     */
    public void getPlaylistContentAsync(
                final String playlistUid,
                final String itemUid,
                final APICallBack<DynamicResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/playlists/{playlistUid}/items/{itemUid}");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5412734620502125967L;
            {
                    put( "playlistUid", playlistUid );
                    put( "itemUid", itemUid );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4990325526063179329L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "Authorization", String.format("Bearer %1$s", Configuration.oAuthAccessToken) );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 400)
                                throw new ErrorResponseException("[Bad Request] Query parameters missing or invalid.", _context);

                            else if (_responseCode == 401)
                                throw new ErrorResponseException("[Unauthorized] Bearer token is missing, expired, or invalid.", _context);

                            else if (_responseCode == 404)
                                throw new ErrorResponseException("[Not Found] Resource not found.", _context);

                            else if (_responseCode == 503)
                                throw new ErrorResponseException("[Service Unavailable] See response body for more detail.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            DynamicResponse _result = new DynamicResponse(_response);

                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Delete a playlist.
     * @param    playlistUid    Required parameter: Unique id related to a specific playlist.
     * @return    Returns the void response from the API call 
     */
    public void deletePlaylist(
                final String playlistUid
    ) throws Throwable {
        APICallBackCatcher<Object> callback = new APICallBackCatcher<Object>();
        deletePlaylistAsync(playlistUid, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        callback.getResult();
    }

    /**
     * Delete a playlist.
     * @param    playlistUid    Required parameter: Unique id related to a specific playlist.
     * @return    Returns the void response from the API call 
     */
    public void deletePlaylistAsync(
                final String playlistUid,
                final APICallBack<Object> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/playlists/{playlistUid}");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4894680376898322754L;
            {
                    put( "playlistUid", playlistUid );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5067151000537121887L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "Authorization", String.format("Bearer %1$s", Configuration.oAuthAccessToken) );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().delete(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 401)
                                throw new APIException("[Unauthorized] Bearer token is missing, expired, or invalid.", _context);

                            else if (_responseCode == 404)
                                throw new ErrorResponseException("[Not Found] Resource not found.", _context);

                            else if (_responseCode == 503)
                                throw new ErrorResponseException("[Service Unavailable] See response body for more detail.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //let the caller know of the success
                            callBack.onSuccess(_context, _context);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Update a playlist.
     * @param    playlistUid    Required parameter: Unique id related to a specific playlist.
     * @param    playlistBase    Required parameter: Request object to update basic playlist details.
     * @return    Returns the Playlist response from the API call 
     */
    public Playlist putPlaylists(
                final String playlistUid,
                final PlaylistBase playlistBase
    ) throws Throwable {
        APICallBackCatcher<Playlist> callback = new APICallBackCatcher<Playlist>();
        putPlaylistsAsync(playlistUid, playlistBase, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Update a playlist.
     * @param    playlistUid    Required parameter: Unique id related to a specific playlist.
     * @param    playlistBase    Required parameter: Request object to update basic playlist details.
     * @return    Returns the void response from the API call 
     */
    public void putPlaylistsAsync(
                final String playlistUid,
                final PlaylistBase playlistBase,
                final APICallBack<Playlist> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/playlists/{playlistUid}");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4979656760315872447L;
            {
                    put( "playlistUid", playlistUid );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5558860972175300592L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "Authorization", String.format("Bearer %1$s", Configuration.oAuthAccessToken) );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().putBody(_queryUrl, _headers, APIHelper.serialize(playlistBase));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 400)
                                throw new ErrorResponseException("[Bad Request] Parameters missing or invalid.", _context);

                            else if (_responseCode == 401)
                                throw new APIException("[Unauthorized] Bearer token is missing, expired, or invalid.", _context);

                            else if (_responseCode == 404)
                                throw new ErrorResponseException("[Not Found] Resource not found.", _context);

                            else if (_responseCode == 503)
                                throw new ErrorResponseException("[Service Unavailable] See response body for more detail.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            Playlist _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<Playlist>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Get a playlist definition.
     * @param    playlistUid    Required parameter: Unique id related to a specific playlist.
     * @return    Returns the Playlist response from the API call 
     */
    public Playlist getPlaylist(
                final String playlistUid
    ) throws Throwable {
        APICallBackCatcher<Playlist> callback = new APICallBackCatcher<Playlist>();
        getPlaylistAsync(playlistUid, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Get a playlist definition.
     * @param    playlistUid    Required parameter: Unique id related to a specific playlist.
     * @return    Returns the void response from the API call 
     */
    public void getPlaylistAsync(
                final String playlistUid,
                final APICallBack<Playlist> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/playlists/{playlistUid}");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5653159911240004967L;
            {
                    put( "playlistUid", playlistUid );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4798888493177278085L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "Authorization", String.format("Bearer %1$s", Configuration.oAuthAccessToken) );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 401)
                                throw new APIException("[Unauthorized] Bearer token is missing, expired, or invalid.", _context);

                            else if (_responseCode == 404)
                                throw new ErrorResponseException("[Not Found] Resource not found.", _context);

                            else if (_responseCode == 503)
                                throw new ErrorResponseException("[Service Unavailable] See response body for more detail.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            Playlist _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<Playlist>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Add item(s) to a playlist.
     * @param    playlistUid    Required parameter: Unique id related to a specific playlist.
     * @param    playlistItems    Required parameter: Request object to add items in playlist.
     * @return    Returns the PlaylistAddResponse response from the API call 
     */
    public PlaylistAddResponse postPlaylistItem(
                final String playlistUid,
                final PlaylistAddRequest playlistItems
    ) throws Throwable {
        APICallBackCatcher<PlaylistAddResponse> callback = new APICallBackCatcher<PlaylistAddResponse>();
        postPlaylistItemAsync(playlistUid, playlistItems, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Add item(s) to a playlist.
     * @param    playlistUid    Required parameter: Unique id related to a specific playlist.
     * @param    playlistItems    Required parameter: Request object to add items in playlist.
     * @return    Returns the void response from the API call 
     */
    public void postPlaylistItemAsync(
                final String playlistUid,
                final PlaylistAddRequest playlistItems,
                final APICallBack<PlaylistAddResponse> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/playlists/{playlistUid}/items");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5709209029099751111L;
            {
                    put( "playlistUid", playlistUid );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4853453711680043801L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "Authorization", String.format("Bearer %1$s", Configuration.oAuthAccessToken) );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(playlistItems));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 400)
                                throw new ErrorResponseException("[Bad Request] Parameters missing or invalid.", _context);

                            else if (_responseCode == 401)
                                throw new APIException("[Unauthorized] Bearer token is missing, expired, or invalid.", _context);

                            else if (_responseCode == 404)
                                throw new ErrorResponseException("[Not Found] Resource not found.", _context);

                            else if (_responseCode == 503)
                                throw new ErrorResponseException("[Service Unavailable] See response body for more detail.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            PlaylistAddResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<PlaylistAddResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Update a playlist by sending a new 'playlistDefinition' model.
     * @param    playlistUid    Required parameter: Unique id related to a specific playlist.
     * @param    playlist    Required parameter: playlist request object
     * @return    Returns the Playlist response from the API call 
     */
    public Playlist updatePlaylist(
                final String playlistUid,
                final PlaylistRequest playlist
    ) throws Throwable {
        APICallBackCatcher<Playlist> callback = new APICallBackCatcher<Playlist>();
        updatePlaylistAsync(playlistUid, playlist, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Update a playlist by sending a new 'playlistDefinition' model.
     * @param    playlistUid    Required parameter: Unique id related to a specific playlist.
     * @param    playlist    Required parameter: playlist request object
     * @return    Returns the void response from the API call 
     */
    public void updatePlaylistAsync(
                final String playlistUid,
                final PlaylistRequest playlist,
                final APICallBack<Playlist> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/playlists/{playlistUid}/items");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5119144788610897119L;
            {
                    put( "playlistUid", playlistUid );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4859546510934723057L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "Authorization", String.format("Bearer %1$s", Configuration.oAuthAccessToken) );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().putBody(_queryUrl, _headers, APIHelper.serialize(playlist));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 400)
                                throw new ErrorResponseException("[Bad Request] Parameters missing or invalid.", _context);

                            else if (_responseCode == 401)
                                throw new APIException("[Unauthorized] Bearer token is missing, expired, or invalid.", _context);

                            else if (_responseCode == 404)
                                throw new ErrorResponseException("[Not Found] Resource not found.", _context);

                            else if (_responseCode == 503)
                                throw new ErrorResponseException("[Service Unavailable] See response body for more detail.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            Playlist _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<Playlist>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Create a playlist.
     * @param    playlist    Required parameter: playlist request object
     * @return    Returns the Playlist response from the API call 
     */
    public Playlist postPlaylist(
                final PlaylistRequest playlist
    ) throws Throwable {
        APICallBackCatcher<Playlist> callback = new APICallBackCatcher<Playlist>();
        postPlaylistAsync(playlist, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Create a playlist.
     * @param    playlist    Required parameter: playlist request object
     * @return    Returns the void response from the API call 
     */
    public void postPlaylistAsync(
                final PlaylistRequest playlist,
                final APICallBack<Playlist> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/playlists");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5198905834256945950L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "Authorization", String.format("Bearer %1$s", Configuration.oAuthAccessToken) );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(playlist));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 400)
                                throw new ErrorResponseException("[Bad Request] Parameters missing or invalid.", _context);

                            else if (_responseCode == 401)
                                throw new APIException("[Unauthorized] Bearer token is missing, expired, or invalid.", _context);

                            else if (_responseCode == 503)
                                throw new ErrorResponseException("[Service Unavailable] See response body for more detail.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            Playlist _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<Playlist>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Get a list of a playlists's items.
     * @param    playlistUid    Required parameter: Unique id related to a specific playlist.
     * @param    start    Optional parameter: Starting point for partial responses, for folder requests. Default is 1.
     * @param    count    Optional parameter: Maximum items to include in a paginated response, for folder requests.  Required if start is specified.
     * @param    sort    Optional parameter: Specify sort order for response. Syntax is '{field}+{asc|desc}'.Valid values for 'field' are: name, versionCreated, size, extension, album, artist, captureDate, contentType, creationDate, genre, height, priority, title, timelineDate.
     * @return    Returns the List<PlaylistItem> response from the API call 
     */
    public List<PlaylistItem> getPlaylistItems(
                final String playlistUid,
                final Integer start,
                final Integer count,
                final String sort
    ) throws Throwable {
        APICallBackCatcher<List<PlaylistItem>> callback = new APICallBackCatcher<List<PlaylistItem>>();
        getPlaylistItemsAsync(playlistUid, start, count, sort, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Get a list of a playlists's items.
     * @param    playlistUid    Required parameter: Unique id related to a specific playlist.
     * @param    start    Optional parameter: Starting point for partial responses, for folder requests. Default is 1.
     * @param    count    Optional parameter: Maximum items to include in a paginated response, for folder requests.  Required if start is specified.
     * @param    sort    Optional parameter: Specify sort order for response. Syntax is '{field}+{asc|desc}'.Valid values for 'field' are: name, versionCreated, size, extension, album, artist, captureDate, contentType, creationDate, genre, height, priority, title, timelineDate.
     * @return    Returns the void response from the API call 
     */
    public void getPlaylistItemsAsync(
                final String playlistUid,
                final Integer start,
                final Integer count,
                final String sort,
                final APICallBack<List<PlaylistItem>> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/playlists/{playlistUid}/items");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4667814285508400880L;
            {
                    put( "playlistUid", playlistUid );
            }});

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5170379658298249922L;
            {
                    put( "start", start );
                    put( "count", count );
                    put( "sort", sort );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4974324618964902769L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "Authorization", String.format("Bearer %1$s", Configuration.oAuthAccessToken) );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 401)
                                throw new APIException("[Unauthorized] Bearer token is missing, expired, or invalid.", _context);

                            else if (_responseCode == 404)
                                throw new ErrorResponseException("[Not Found] Resource not found.", _context);

                            else if (_responseCode == 503)
                                throw new ErrorResponseException("[Service Unavailable] See response body for more detail.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            List<PlaylistItem> _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<List<PlaylistItem>>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Get a list of the user's playlists.
     * @param    type    Optional parameter: The type of the playlist. Can be one of 'image', 'music', 'video' or 'image-video'.
     * @param    start    Optional parameter: Starting point for partial responses, for folder requests. Default is 1.
     * @param    count    Optional parameter: Maximum items to include in a paginated response, for folder requests.  Required if start is specified.
     * @param    sort    Optional parameter: Specify sort order for response. Syntax is '{field}+{asc|desc}'. Valid values for 'field' are 'name' and 'creationDate'.
     * @return    Returns the List<Playlist> response from the API call 
     */
    public List<Playlist> getPlaylists(
                final String type,
                final Integer start,
                final Integer count,
                final String sort
    ) throws Throwable {
        APICallBackCatcher<List<Playlist>> callback = new APICallBackCatcher<List<Playlist>>();
        getPlaylistsAsync(type, start, count, sort, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Get a list of the user's playlists.
     * @param    type    Optional parameter: The type of the playlist. Can be one of 'image', 'music', 'video' or 'image-video'.
     * @param    start    Optional parameter: Starting point for partial responses, for folder requests. Default is 1.
     * @param    count    Optional parameter: Maximum items to include in a paginated response, for folder requests.  Required if start is specified.
     * @param    sort    Optional parameter: Specify sort order for response. Syntax is '{field}+{asc|desc}'. Valid values for 'field' are 'name' and 'creationDate'.
     * @return    Returns the void response from the API call 
     */
    public void getPlaylistsAsync(
                final String type,
                final Integer start,
                final Integer count,
                final String sort,
                final APICallBack<List<Playlist>> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/playlists");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5732227409479947101L;
            {
                    put( "type", type );
                    put( "start", start );
                    put( "count", count );
                    put( "sort", sort );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5097429203178638714L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "Authorization", String.format("Bearer %1$s", Configuration.oAuthAccessToken) );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 400)
                                throw new ErrorResponseException("[Bad Request] Query parameters missing or invalid.", _context);

                            else if (_responseCode == 401)
                                throw new ErrorResponseException("[Unauthorized] Bearer token is missing, expired, or invalid.", _context);

                            else if (_responseCode == 503)
                                throw new ErrorResponseException("[Service Unavailable] See response body for more detail.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            List<Playlist> _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<List<Playlist>>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

}