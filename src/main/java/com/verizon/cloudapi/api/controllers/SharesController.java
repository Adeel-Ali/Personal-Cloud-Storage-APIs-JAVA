/*
 * PersonalCloudStorageAPIsLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 10/10/2016
 */
package com.verizon.cloudapi.api.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;

import com.verizon.cloudapi.api.*;
import com.verizon.cloudapi.api.models.*;
import com.verizon.cloudapi.api.exceptions.*;
import com.verizon.cloudapi.api.http.client.HttpClient;
import com.verizon.cloudapi.api.http.client.HttpContext;
import com.verizon.cloudapi.api.http.request.HttpRequest;
import com.verizon.cloudapi.api.http.response.HttpResponse;
import com.verizon.cloudapi.api.http.response.HttpStringResponse;
import com.verizon.cloudapi.api.http.client.APICallBack;
import com.verizon.cloudapi.api.controllers.syncwrapper.APICallBackCatcher;

public class SharesController extends BaseController {    
    //private static variables for the singleton pattern
    private static Object syncObject = new Object();
    private static SharesController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the SharesController class 
     */
    public static SharesController getInstance() {
        synchronized (syncObject) {
            if (null == instance) {
                instance = new SharesController();
            }
        }
        return instance;
    }

    /**
     * Delete a share.
     * @param    shareUid    Required parameter: The unique ID of the share.
     * @return    Returns the void response from the API call 
     */
    public void deleteShare(
                final String shareUid
    ) throws Throwable {
        APICallBackCatcher<Object> callback = new APICallBackCatcher<Object>();
        deleteShareAsync(shareUid, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        callback.getResult();
    }

    /**
     * Delete a share.
     * @param    shareUid    Required parameter: The unique ID of the share.
     * @return    Returns the void response from the API call 
     */
    public void deleteShareAsync(
                final String shareUid,
                final APICallBack<Object> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/shares/{shareUid}");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5369589098734812489L;
            {
                    put( "shareUid", shareUid );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5048102418495515393L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "Authorization", String.format("Bearer %1$s", Configuration.oAuthAccessToken) );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().delete(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 401)
                                throw new ErrorResponseException("[Unauthorized] Bearer token is missing, expired, or invalid.", _context);

                            else if (_responseCode == 404)
                                throw new ErrorResponseException("[Not Found] Resource not found.", _context);

                            else if (_responseCode == 503)
                                throw new ErrorResponseException("[Service Unavailable] See response body for more detail.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //let the caller know of the success
                            callBack.onSuccess(_context, _context);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Create Share.
     * @param    createShare    Required parameter: Allows a user to create a share
     * @return    Returns the CreateShareResponse response from the API call 
     */
    public CreateShareResponse createShare(
                final CreateShareRequest createShare
    ) throws Throwable {
        APICallBackCatcher<CreateShareResponse> callback = new APICallBackCatcher<CreateShareResponse>();
        createShareAsync(createShare, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Create Share.
     * @param    createShare    Required parameter: Allows a user to create a share
     * @return    Returns the void response from the API call 
     */
    public void createShareAsync(
                final CreateShareRequest createShare,
                final APICallBack<CreateShareResponse> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/shares");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5217140125748641535L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "Authorization", String.format("Bearer %1$s", Configuration.oAuthAccessToken) );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(createShare));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 400)
                                throw new ErrorResponseException("[Bad Request] Parameters missing or invalid.", _context);

                            else if (_responseCode == 401)
                                throw new ErrorResponseException("[Unauthorized] Bearer token is missing, expired, or invalid.", _context);

                            else if (_responseCode == 503)
                                throw new ErrorResponseException("[Service Unavailable] See response body for more detail.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            CreateShareResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<CreateShareResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * List Shares.
     * @param    cursor    Optional parameter: A cursor used in paginating the response. Cursors are returned in 'next' and 'prev' links in the response body.
     * @param    filter    Optional parameter: Filters the returned shares. Currently the value can only be 'outbound' (shared by the user).
     * @param    since    Optional parameter: The date and time, expressed in the W3C date and time format, after which messages should be returned.
     * @param    until    Optional parameter: The date and time, expressed in the W3C date and time format, up to which messages should be returned.
     * @param    count    Optional parameter: Maximum items to include in a paginated response, for share requests.
     * @return    Returns the ShareResponseList response from the API call 
     */
    public ShareResponseList listShares(
                final String cursor,
                final String filter,
                final String since,
                final String until,
                final Integer count
    ) throws Throwable {
        APICallBackCatcher<ShareResponseList> callback = new APICallBackCatcher<ShareResponseList>();
        listSharesAsync(cursor, filter, since, until, count, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * List Shares.
     * @param    cursor    Optional parameter: A cursor used in paginating the response. Cursors are returned in 'next' and 'prev' links in the response body.
     * @param    filter    Optional parameter: Filters the returned shares. Currently the value can only be 'outbound' (shared by the user).
     * @param    since    Optional parameter: The date and time, expressed in the W3C date and time format, after which messages should be returned.
     * @param    until    Optional parameter: The date and time, expressed in the W3C date and time format, up to which messages should be returned.
     * @param    count    Optional parameter: Maximum items to include in a paginated response, for share requests.
     * @return    Returns the void response from the API call 
     */
    public void listSharesAsync(
                final String cursor,
                final String filter,
                final String since,
                final String until,
                final Integer count,
                final APICallBack<ShareResponseList> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/shares");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5071452970702519238L;
            {
                    put( "cursor", cursor );
                    put( "filter", (null != filter) ? filter : "outbound" );
                    put( "since", since );
                    put( "until", until );
                    put( "count", count );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5357176600247676924L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "Authorization", String.format("Bearer %1$s", Configuration.oAuthAccessToken) );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 400)
                                throw new ErrorResponseException("[Bad Request] Parameters missing or any invalid parameter passed.", _context);

                            else if (_responseCode == 401)
                                throw new ErrorResponseException("[Unauthorized] Bearer token is missing, expired, or invalid.", _context);

                            else if (_responseCode == 503)
                                throw new ErrorResponseException("[Service Unavailable] See response body for more detail.", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            ShareResponseList _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<ShareResponseList>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

}